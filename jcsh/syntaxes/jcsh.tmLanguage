<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>jcsh</string>
	</array>
	<key>name</key>
	<string>JCShell Tools</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#empty-line</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comment</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#label</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#line-continuation</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comment-line</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#return-statement</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#function-definition</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#if-block</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#while-block</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#for-block</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#try-block</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#flow-statement</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#assignment-operator</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#assignment-command</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#string</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#call</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#invalid-character</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>argument</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;=\s)\s*</string>
					<key>comment</key>
					<string>Argument of a call</string>
					<key>end</key>
					<string>(?&lt;=\S)(?=\s|\)|$|\\)</string>
					<key>name</key>
					<string>meta.argument.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flag</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>assignment-command</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?:^|(?&lt;=.:))\s*(/set-var|/s-v)\s((?:\s*(?:-d|--def|-g|--global|-q|--quote)\s)*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.assignment.command.jcsh</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.flag.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Variable assignment with explicit command, only a label can be placed in front</string>
					<key>end</key>
					<string>(?=(?:\s#[^\(])|$|\\)</string>
					<key>name</key>
					<string>meta.assignment.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?&lt;=(?:/set-var\s|/s-v\s|-d\s|--def\s|-g\s|--global\s|-q\s|--quote\s))\s*</string>
							<key>comment</key>
							<string>Match the newly defined variable name (consume up to the next space). We have to rematch the beginning of the line to make sure we only take the first word after the space (and that the regex is not applied to each word on the line)</string>
							<key>end</key>
							<string>(?&lt;=\S)\s+(?=.*|(?:\s#[^\(])|$|\\)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>comment</key>
									<string>Handle the subscript first (array '[]')</string>
									<key>include</key>
									<string>#subscript</string>
								</dict>
								<dict>
									<key>comment</key>
									<string>Then the newly defined variable name</string>
									<key>include</key>
									<string>#assignment-name</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>comment</key>
							<string>Process the value assigned (after the first space)</string>
							<key>include</key>
							<string>#expression</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Spaces are legit for variable assignment</string>
							<key>match</key>
							<string>\s</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>assignment-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Name of the variable newly created (that can contains variables calls inside)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-call</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\S</string>
							<key>name</key>
							<string>variable.other.assigned.jcsh</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>assignment-operator</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?:^|(?&lt;=.:))\s*(?=[^\s\"\']*[^&lt;&gt;\=\!]\=[^~\=])</string>
					<key>comment</key>
					<string>Variable assignment with operator ('='). Avoid assignment detection if the following operators are formed with the '=': &lt;= &gt;= == != =~ or if a space or quote is present. Only a label can be placed in front</string>
					<key>end</key>
					<string>(?&lt;=.)\s*(?=(?:\s#[^\(])|$|\\)</string>
					<key>name</key>
					<string>meta.assignment.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?&lt;=\=)</string>
							<key>comment</key>
							<string>Consume everything after the first '='</string>
							<key>end</key>
							<string>(?=(?:\s#[^\(])|$|\\)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>comment</key>
									<string>Process the value assigned (after the '=')</string>
									<key>include</key>
									<string>#expression</string>
								</dict>
								<dict>
									<key>comment</key>
									<string>Spaces are legit for variable assignment</string>
									<key>match</key>
									<string>\s</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#invalid-character</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?&lt;=(?:.|^))(?=.*\=)</string>
							<key>comment</key>
							<string>Match the newly defined variable name (consume up to the '=')</string>
							<key>end</key>
							<string>(=)(?=.|(?:\s#[^\(])|$|\\)</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.assignment.operator.jcsh</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>comment</key>
									<string>Handle the subscript first (array '[]')</string>
									<key>include</key>
									<string>#subscript</string>
								</dict>
								<dict>
									<key>comment</key>
									<string>Then the newly defined variable name</string>
									<key>include</key>
									<string>#assignment-name</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>builtin-modifier</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.modifier.variable.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Built-in variable modifier name (no space allowed)</string>
					<key>match</key>
					<string>(?&lt;=;)([Dd]irname|[Ff]ilename|[Bb]asename|[Ee]xtension|[Ll]|[Qq]|[Qq]q|[Ll]c|[Uu]c)(?=[;\}])</string>
					<key>name</key>
					<string>meta.modifier.name.builtin.jcsh</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;=;)(h)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.modifier.variable.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Built-in hex variable modifier ('h')</string>
					<key>end</key>
					<string>\s*(?=[;\}])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#builtin-modifier-value</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;=;)(s)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.modifier.variable.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Built-in substring variable modifier ('s')</string>
					<key>end</key>
					<string>(?=[;\}])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?&lt;=s)</string>
							<key>comment</key>
							<string>First argument of substring variable modifier</string>
							<key>end</key>
							<string>(?=[,;\}])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#builtin-modifier-value</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(,)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.variable.modifier.jcsh</string>
								</dict>
							</dict>
							<key>comment</key>
							<string>Second argument of substring variable modifier</string>
							<key>end</key>
							<string>(?=[;\}])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#builtin-modifier-value</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;={time;)(fmt)(\=)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.modifier.variable.jcsh</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.assignment.operator.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Built-in assigned variable modifier for Time ('time')</string>
					<key>end</key>
					<string>\s*(?=[;\}])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-call</string>
						</dict>
						<dict>
							<key>match</key>
							<string>.</string>
							<key>name</key>
							<string>string.unquoted.assigned-modifier.jcsh</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;={random;)(max|len)(\=)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.modifier.variable.jcsh</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.assignment.operator.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Built-in assigned variable modifier for Random ('random')</string>
					<key>end</key>
					<string>(?=[;\}])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#builtin-modifier-value</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>builtin-modifier-value</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Values that can be given to a modifier (number)</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nested-call</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.hexadecimal.jcsh</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.decimal.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Either decimal or hexadecimal are accepted</string>
					<key>match</key>
					<string>(0x[\da-fA-F]*)|(\d*)</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#invalid-character</string>
				</dict>
			</array>
		</dict>
		<key>call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?:^|(?&lt;=.:))</string>
					<key>comment</key>
					<string>Call to a built-in command, function or external script. Only a label can be placed in front</string>
					<key>end</key>
					<string>(?&lt;=.)\s*(?=\)|#[^//(]|$|\\)</string>
					<key>name</key>
					<string>meta.control.call.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#callable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#argument</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\s</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>callable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;=^|:|\()</string>
					<key>comment</key>
					<string>Callable built-in command, function or external script</string>
					<key>end</key>
					<string>(?&lt;!^|:|\(|\s)(?=\s|\)|\s#|$)</string>
					<key>name</key>
					<string>meta.callable.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>string.unquoted.call-modifier.jcsh punctuation.call-modifier.builtin.jcsh</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>support.function.builtin.slash.jcsh punctuation.definition.callable.builtin.slash.jcsh</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>support.function.builtin.slash.jcsh</string>
								</dict>
							</dict>
							<key>comment</key>
							<string>JCShell built-in slash command</string>
							<key>match</key>
							<string>(?&lt;=^|:|\()\s*([@\-])?(/)(app|applet|atr|c-v|cap-clear|cap-del-auth|cap-extrdt-auth|cap-info|cap-inst-auth|cap-load-auth|cap-reg-update|cap-sign|card|change-protocol|channel|clear-vars|close|echo|error|exchange-poweroff|exchange-warmreset|exec|expr|glob|identify|l-r|l-v|list-readers|list-vars|manage-channel|mode|printf|r-echo|register|s-v|select|send|set-channel|set-var|sleep|start-timer|stop-timer|term|terminal)(?=\s|\)|#|$)</string>
							<key>name</key>
							<string>meta.support.function.builtin.slash.jcsh</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>string.unquoted.call-modifier.jcsh punctuation.call-modifier.builtin.jcsh</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>support.function.builtin.jcsh</string>
								</dict>
							</dict>
							<key>comment</key>
							<string>JCShell built-in command</string>
							<key>match</key>
							<string>(?&lt;=^|:|\()\s*([@\-])?(&gt;|\?|auth|card-info|delete|delete-key|ext-auth|extradite|flush|get-cplc|get-crs-state|get-data|get-sd-cert|help|init-upd|init-update|install|internal-authenticate|ls|mutual-authenticate|perform-security-operation|personalize|print-key|put-key|put-key-ecc|put-keyset|put-pub-key|quit|registry-update|select|send|session-info|set-applet|set-crs-state|set-key|set-scp|set-sd-state|set-security|set-state|store-aid|store-data|store-keyset|upload|upload-install-make-selectable|version)(?=\s|\)|#|$)</string>
							<key>name</key>
							<string>meta.support.function.builtin.jcsh</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>string.unquoted.call-modifier.jcsh punctuation.call-modifier.builtin.jcsh</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>support.function.plugin.crypto.jcsh</string>
								</dict>
							</dict>
							<key>comment</key>
							<string>JCShell Crypto Plugin command</string>
							<key>match</key>
							<string>(?&lt;=^|:|\()\s*([@\-])?(decrypt|encrypt|hash|keygen|mac|pad|sign|unpad)(?=\s|\)|#|$)</string>
							<key>name</key>
							<string>meta.support.function.plugin.crypto.jcsh</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?&lt;=^|:|\()</string>
							<key>comment</key>
							<string>User-defined callable</string>
							<key>end</key>
							<string>(?&lt;!^|:|\(|\s)(?=\s|\)|\s#|$)</string>
							<key>name</key>
							<string>meta.callable.user.jcsh</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>string.unquoted.call-modifier.jcsh punctuation.call-modifier.user.jcsh</string>
										</dict>
									</dict>
									<key>match</key>
									<string>(?&lt;=^|:|\()\s*([@\-])?</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#variable</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#nested-call</string>
								</dict>
								<dict>
									<key>match</key>
									<string>\S</string>
									<key>name</key>
									<string>entity.name.function.jcsh</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#invalid-character</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>catch-clause</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.catch.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Catch clause</string>
					<key>match</key>
					<string>^\s*(catch)(?=\s+[^\s\\#])</string>
					<key>name</key>
					<string>meta.control.catch.jcsh</string>
				</dict>
			</array>
		</dict>
		<key>comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment.line.jcsh</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>In-line comment starting with '#'</string>
					<key>match</key>
					<string>\s*(?&lt;=\s)((#).*)$</string>
					<key>name</key>
					<string>meta.comment.line.jcsh</string>
				</dict>
			</array>
		</dict>
		<key>comment-line</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment.line.jcsh</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Line containing only whitespace and a single-line comment starting with '#'</string>
					<key>match</key>
					<string>^\s*((#).*)$</string>
					<key>name</key>
					<string>meta.comment.line.full.jcsh</string>
				</dict>
			</array>
		</dict>
		<key>else-clause</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.else.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Else clause</string>
					<key>match</key>
					<string>^\s*(else)\s*(?=\s|$)</string>
					<key>name</key>
					<string>meta.control.else.jcsh</string>
				</dict>
			</array>
		</dict>
		<key>elseif-clause</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.elseif.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Elseif clause</string>
					<key>match</key>
					<string>^\s*(elseif)(?=\s+[^\s\\#])</string>
					<key>name</key>
					<string>meta.control.elseif.jcsh</string>
				</dict>
			</array>
		</dict>
		<key>empty-line</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Line containing only whitespace</string>
					<key>match</key>
					<string>^\s*(\\)?$</string>
					<key>name</key>
					<string>meta.empty.jcsh</string>
				</dict>
			</array>
		</dict>
		<key>expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nested-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#number</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(#|%)?(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.modifier.length.jcsh punctuation.parentheses.modifier.jcsh</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.parentheses.begin.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Process the content of parenthesis the same way</string>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.parentheses.end.jcsh</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>[\w\-\.\=,!:;\[\]#]</string>
					<key>name</key>
					<string>string.unquoted.expression.jcsh</string>
				</dict>
			</array>
		</dict>
		<key>flag</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;=\s)(--?)(?=\w)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.flag.jcsh punctuation.definition.flag.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Flag argument of a call</string>
					<key>end</key>
					<string>(?&lt;=[\}\)\w])(?=\)|\s|#|$)</string>
					<key>name</key>
					<string>meta.flag.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-call</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\w[\w\-\.]*</string>
							<key>name</key>
							<string>variable.parameter.flag.jcsh</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>flow-expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;=for|if|elseif|while|catch|return)\s+</string>
					<key>comment</key>
					<string>Expression check for flow control blocks: if, for, while, elseif, catch, return</string>
					<key>end</key>
					<string>\s*(?:\s((#).*)?$|(\\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment.line.jcsh</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.jcsh</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>The 'for' block as an additional iterator provided</string>
							<key>match</key>
							<string>(?&lt;=for\s)\s*(\w[\w\-\.]*)</string>
							<key>name</key>
							<string>variable.parameter.iterator.jcsh</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\s</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>flow-statement</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?:^|(?&lt;=.:))\s*(?:(break)|(continue)|(?:(goto)(?=\s+\S)))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.break.jcsh</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.continue.jcsh</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.control.goto.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Break, continue or goto statement, only a label can be placed in front. Goto requires a label after. This is check before callable, thus we enforce keywords continue, goto and break to not be used as function/script name even though JCShell is not actively forbidding it (outside loops)</string>
					<key>end</key>
					<string>\s*(?=(?:\s#.*)|$|\\)</string>
					<key>name</key>
					<string>meta.control.flow.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-call</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>If the target label is a string, highlight it specially</string>
							<key>match</key>
							<string>\S</string>
							<key>name</key>
							<string>keyword.control.label.target.jcsh</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Discard any remaining spaces</string>
							<key>match</key>
							<string>\s</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>for-block</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?:^|(?&lt;=.:))\s*(for)(?=\s+[^\s\\#])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.for.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>For block, only a label can be placed in front</string>
					<key>end</key>
					<string>^\s*(end)\s*(?=\s|$)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.end.for.jcsh</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.control.for.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flow-expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>function-definition</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(DEFUN)\s+(\S+)(\s*GLOBAL)?(?=\s|$)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.function.definition.begin.jcsh</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.definition.jcsh</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.definition.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>DEFUN function definition. 'GLOBAL' is the only value allowed after function name (with comments)</string>
					<key>end</key>
					<string>^\s*(END)\s*(?=\s|$)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.function.definition.end.jcsh</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function-definition.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>if-block</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?:^|(?&lt;=.:))\s*(if)(?=\s+[^\s\\#])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.if.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>If block, only a label can be placed in front</string>
					<key>end</key>
					<string>^\s*(end)\s*(?=\s|$)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.end.if.jcsh</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.control.if.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#elseif-clause</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#else-clause</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flow-expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>invalid-character</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Match anything not matched yet</string>
					<key>match</key>
					<string>.</string>
					<key>name</key>
					<string>invalid.character.jcsh</string>
				</dict>
			</array>
		</dict>
		<key>label</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.label.definition.jcsh</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.label.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Leading label that can be jumped to using goto. Labels can be placed at the beginning of any line and cannot contain variables</string>
					<key>match</key>
					<string>^\s*(\w[\w\-\.]*)\s*(:)</string>
				</dict>
			</array>
		</dict>
		<key>line-continuation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\\)\s*$</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.line-continuation.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Line continuation</string>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>meta.line-continuation.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>modifier</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.modifier.separator.jcsh punctuation.separator.variable.modifier.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Variable modifier (no space allowed)</string>
					<key>end</key>
					<string>(?=[;\}])</string>
					<key>name</key>
					<string>meta.variable.modifier.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#builtin-modifier</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-call</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>nested-call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\$)(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.nested-call.jcsh punctuation.definition.nested-call.head.jcsh</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.nested-call.jcsh punctuation.definition.nested-call.begin.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Nested call ('$()')</string>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.nested-call.jcsh punctuation.definition.nested-call.end.jcsh</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.nested-call.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?&lt;=\()</string>
							<key>end</key>
							<string>(?&lt;=.)\s*(?=\)|#[^\(]|$|(\\))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#callable</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#argument</string>
								</dict>
								<dict>
									<key>match</key>
									<string>\s</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#invalid-character</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>number</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Number are detected if not part of a word</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#number-hex</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#number-float</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#number-dec</string>
				</dict>
			</array>
		</dict>
		<key>number-dec</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Detect decimal numbers (separated by word boundary, so not in the middle of a word)</string>
					<key>match</key>
					<string>\b\d+\b</string>
					<key>name</key>
					<string>constant.numeric.decimal.jcsh</string>
				</dict>
			</array>
		</dict>
		<key>number-float</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Detect floats numbers (e.g.: 2.2 .2 or 2.) excluding cases of operators '..' (e.g.: [2..3])</string>
					<key>match</key>
					<string>(?:\d*(?&lt;!\.)\.\d+)|(?:\d+\.(?!\.)\d*)</string>
					<key>name</key>
					<string>constant.numeric.float.jcsh</string>
				</dict>
			</array>
		</dict>
		<key>number-hex</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Detect hex numbers starting with '0x'</string>
					<key>match</key>
					<string>(?&lt;!\w)0x[\da-fA-F]+(?!\w|(?:\.[^\.]))</string>
					<key>name</key>
					<string>constant.numeric.hexadecimal.jcsh</string>
				</dict>
			</array>
		</dict>
		<key>operator</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>-|\*|/|%|\+|&lt;&lt;|&gt;&gt;&gt;|&gt;&gt;|&lt;=|&lt;|&gt;=|&gt;|==|!=|!|=~|~|&amp;|\^|\||\.\.|\?</string>
					<key>name</key>
					<string>keyword.operator.jcsh</string>
				</dict>
			</array>
		</dict>
		<key>plugin-modifier</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>:</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>support.class.plugin.variable.jcsh punctuation.separator.variable.modifier.plugin.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Modifier for accessing plugin variables</string>
					<key>end</key>
					<string>(?=[\[;\}])</string>
					<key>name</key>
					<string>meta.variable.plugin-modifier.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-call</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\s*\w[\w\-\.]*\s*</string>
							<key>name</key>
							<string>support.class.plugin.variable.jcsh support.variable.name.plugin.jcsh</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>return-statement</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?:^|(?&lt;=.:))\s*(return)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.return.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Return statement, only a label can be placed in front</string>
					<key>end</key>
					<string>\s*(?=(?:\s#.*)|$|\\)</string>
					<key>name</key>
					<string>meta.control.return.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flow-expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.single.begin.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Single-quoted string literal without variable replacement and interpolation</string>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.single.end.jcsh</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\['\\nrt]</string>
							<key>name</key>
							<string>constant.character.escape.jcsh</string>
						</dict>
						<dict>
							<key>match</key>
							<string>.</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.double.begin.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Double-quoted string literal with variable replacement and interpolation</string>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.double.end.jcsh</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-call</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\\["\\\$nrt]</string>
							<key>name</key>
							<string>constant.character.escape.jcsh</string>
						</dict>
						<dict>
							<key>match</key>
							<string>.</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>subscript</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\[)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.subscript.jcsh punctuation.definition.subscript.begin.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Variable subscript (array '[]')</string>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.subscript.jcsh punctuation.definition.subscript.end.jcsh</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>Inside the '[]' (no space allowed)</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Match '[*]' to color the '*'</string>
							<key>match</key>
							<string>(?&lt;=\[)\*(?=\])</string>
							<key>name</key>
							<string>support.constant.subscript.asterisk.jcsh punctuation.subscript.content.asterisk.jcsh</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Match '[#]' to color the '#', only if it's not part of a variable call</string>
							<key>match</key>
							<string>(?&lt;=\[)\#(?=\](?:\s|=))</string>
							<key>name</key>
							<string>support.constant.subscript.number-sign.jcsh punctuation.subscript.content.number-sign.jcsh</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-call</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#operator</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Float numbers are not allowed thus only include hex and dec</string>
							<key>include</key>
							<string>#number-hex</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#number-dec</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>try-block</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?:^|(?&lt;=.:))\s*(try)\s*(?=\s|$)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.try.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Try block, only a label can be placed in front</string>
					<key>end</key>
					<string>^\s*(end)\s*(?=\s|$)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.end.try.jcsh</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.control.try.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#catch-clause</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flow-expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\$)(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.reference.head.jcsh</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.reference.begin.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Bracket-style variable reference</string>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.reference.end.jcsh</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.reference.variable.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#subscript</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#plugin-modifier</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#modifier</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable-name</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>variable-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;=\{)</string>
					<key>comment</key>
					<string>Variable name. May contain replaced variables and interpolations</string>
					<key>end</key>
					<string>(?=[:\[;\}])</string>
					<key>name</key>
					<string>meta.variable.name.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variable-name-builtin</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable-name-positional</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable-name-environment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable-name-user</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>variable-name-builtin</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Name of a JCShell built-in variable.</string>
					<key>match</key>
					<string>(?&lt;=\{)\s*(?:[Aa]rgv|[Cc]hannel|ECC_CURVEPARAM_A|ECC_CURVEPARAM_B|ECC_CURVEPARAM_G|ECC_CURVEPARAM_N|ECC_CURVEPARAM_P|ECC_SharedSecret|exec\.dir|exec\.errorlog|exec\.output|JCOPDIR|KEY_ECC_PrivateKey|KEY_ECC_PublicKeyX|KEY_ECC_PublicKeyY|KEY_RSA_PrivateKey|KEY_RSA_PrivateKey_dP|KEY_RSA_PrivateKey_dQ|KEY_RSA_PrivateKey_P|KEY_RSA_PrivateKey_PQ|KEY_RSA_PrivateKey_Q|KEY_RSA_PublicKey|last\.apdu\.executiontime|last\.apdu\.executiontime\.unit|last\.error|last\.errorlog|last\.executiontime|last\.executiontime\.unit|last\.response\.data|last\.response\.status|last\.return|logfile\.list|[Pp]ath|[Pp]lugin|random|[Rr]esponse|script\.dir|script\.line|script\.name|scrtimer\.exec\.time|SIGNATURE_ECDSA_R|SIGNATURE_ECDSA_S|SIGNATURE_RSA|timer\.execution\.time|timer\.id|[Tt]erminal|time|VERIFY_SIGN|[Vv]ersion)\s*(?=[\[;\}])</string>
					<key>name</key>
					<string>support.constant.builtin.jcsh</string>
				</dict>
			</array>
		</dict>
		<key>variable-name-environment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.constant.environment.jcsh punctuation.definition.variable.name.environment.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Name of an environment variable (starting with '*')</string>
					<key>match</key>
					<string>(?&lt;=\{)(\*)[\w.]+(?=[\[;\}])</string>
					<key>name</key>
					<string>variable.other.environment.jcsh</string>
				</dict>
			</array>
		</dict>
		<key>variable-name-positional</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Name of a positional variable</string>
					<key>match</key>
					<string>(?&lt;=\{)\d+(?=[\[;\}])</string>
					<key>name</key>
					<string>support.constant.positional.jcsh</string>
				</dict>
			</array>
		</dict>
		<key>variable-name-user</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;=\{)</string>
					<key>comment</key>
					<string>User-defined variable name</string>
					<key>end</key>
					<string>(?=[:\[;\}])</string>
					<key>name</key>
					<string>meta.variable.other.user.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-call</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\S</string>
							<key>name</key>
							<string>variable.other.user.jcsh</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#invalid-character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>while-block</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?:^|(?&lt;=.:))\s*(while)(?=\s+[^\s\\#])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.while.jcsh</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>While block, only a label can be placed in front</string>
					<key>end</key>
					<string>^\s*(end)\s*(?=\s|$)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.end.while.jcsh</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.control.while.jcsh</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flow-expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.jcsh</string>
	<key>uuid</key>
	<string>18d303a3-9fdd-4503-8eba-e8c0b283ddc1</string>
	<key>version</key>
	<string>1.0.1</string>
	<key>yaml_variable</key>
	<false/>
</dict>
</plist>